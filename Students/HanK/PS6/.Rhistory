knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(modelr)
library(tree)
library(randomForest)
library(knitr)
set.seed(2)
# read the data
biden <- read_csv("biden.csv")
# split the data
biden_split <- resample_partition(biden, c(test = 0.3, train = 0.7))
# MSE function
mse <- function(model, data) {
x <- modelr:::residuals(model, data)
mean(x ^ 2, na.rm = TRUE)
}
features <- "biden ~ female + age + educ + dem + rep"
# train the first tree
biden_result1 <- tree(formula(features), data = biden_split$train,
method = "recursive.partition")
# plot
plot(biden_result1)
text(biden_result1)
title(main = "The first tree with default control")
# Calculate the MSE
mse1 = mse(biden_result1,biden_split$test)
cat("The test mse of the first tree is ", mse1)
# tree with control
biden_result2 <- tree(formula(features), data = biden_split$train,
control = tree.control(nobs = nrow(biden_split$train),
mindev = 0))
mse2 <- mse(biden_result2, biden_split$test)
plot(biden_result2)
text(biden_result2, cex = 0.7)
title(main = "The second tree before pruning")
# pruned trees
pruned_trees <- map(2:30, prune.tree, tree = biden_result2, k = NULL)
mses <- map_dbl(pruned_trees, mse, data = biden_split$test)
opt_tree <- pruned_trees[[which.min(mses)]]
opt_mse <- mse(opt_tree, biden_split$test)
data.frame(num_nodes = 2:30, mses = mses) %>%
ggplot(aes(x = num_nodes, y = mses)) +
geom_line() +
scale_x_continuous(breaks =  c(5, 10, 15, 20, 25, 30)) +
labs(title = "MSEs with different number of nodes when we prune the tree",
x = "Number of Nodes",
y = "Test MSE")
plot(opt_tree)
text(opt_tree, cex = 0.7)
title(main = "The optimal pruned tree")
kable(cbind(mse2, opt_mse),
col.names = c("before pruning mse", "pruned mse"))
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, ntree = 500, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
# bagging importance
bag_importance <- as.data.frame(importance(bag_tree)) %>%
add_rownames("features") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(bag_importance, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2))) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
cat("The bagging test mse is", mse_bag)
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train, mtry =1,ntree = 500)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
bag_tree
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(tidyverse)
library(modelr)
library(tree)
library(randomForest)
library(knitr)
set.seed(2)
# read the data
biden <- read_csv("biden.csv")
# split the data
biden_split <- resample_partition(biden, c(test = 0.3, train = 0.7))
# MSE function
mse <- function(model, data) {
x <- modelr:::residuals(model, data)
mean(x ^ 2, na.rm = TRUE)
}
features <- "biden ~ female + age + educ + dem + rep"
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, ntree = 50, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, ntree = 20, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, ntree = 500, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
# bagging importance
bag_importance <- as.data.frame(importance(bag_tree)) %>%
add_rownames("features") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(bag_importance, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2))) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, ntree = 10, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(modelr)
library(tree)
library(randomForest)
library(knitr)
set.seed(2)
# read the data
biden <- read_csv("biden.csv")
# split the data
biden_split <- resample_partition(biden, c(test = 0.3, train = 0.7))
# MSE function
mse <- function(model, data) {
x <- modelr:::residuals(model, data)
mean(x ^ 2, na.rm = TRUE)
}
features <- "biden ~ female + age + educ + dem + rep"
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
?randomForest
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), subset = biden_split$train,
mtry = 5, importance=TRUE)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), subset = biden_split$train,
mtry = 5, importance=TRUE)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, nodesize = 7, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, maxnodes = 7, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, maxnodes = 8, importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, maxnodes = 7, nodesize,
importance=TRUE)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, nodesize = 5, maxnodes = 9,
importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, nodesize = 6, maxnodes = 8,
importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, nodesize = 6, maxnodes = 8, ntree = 500,
importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
# Bagging is simply a special case of a random forest with m = p.
# So we can use random forest function.
bag_tree <- randomForest(formula(features), data = biden_split$train,
mtry = 5, maxnodes = 7, ntree = 500,
importance=TRUE)
mse_bag <-  mse(bag_tree, biden_split$test)
cat("The bagging test mse is", mse_bag)
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500, maxnodes = 7)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500, nodesize = 5, maxnodes = 7)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500, nodesize = 5, maxnodes = 9)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
#train tree
biden_rf1 <- randomForest(biden ~ ., data = biden_split$train, mtry =1,ntree = 500)
biden_rf2 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,ntree = 500)
biden_rf3 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,ntree = 500)
#calculate MSE
mse_rf1 = mse(biden_rf1, biden_split$test)
mse_rf2 = mse(biden_rf2, biden_split$test)
mse_rf3 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf1, mse_rf2, mse_rf3),
col.names = c("m = 1", "m = 2", "m = 3"))
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
biden_rf4 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf5 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,
ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf6 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,
ntree = 500, nodesize = 5, maxnodes = 9)
mse_rf4 = mse(biden_rf1, biden_split$test)
mse_rf5 = mse(biden_rf2, biden_split$test)
mse_rf6 = mse(biden_rf3, biden_split$test)
kable(cbind(mse_rf4, mse_rf5, mse_rf6),
col.names = c("m = 1", "m = 2", "m = 3"))
importance4 <-  as.data.frame(importance(biden_rf4)) %>%
add_rownames("features")
importance5 <-  as.data.frame(importance(biden_rf5)) %>%
add_rownames("features")
importance6 <-  as.data.frame(importance(biden_rf6)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance4,
"m = 2" = importance5,
"m = 3" = importance6, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "min and max node are 5 and 9"
x = "Features",
importance4 <-  as.data.frame(importance(biden_rf4)) %>%
add_rownames("features")
importance5 <-  as.data.frame(importance(biden_rf5)) %>%
add_rownames("features")
importance6 <-  as.data.frame(importance(biden_rf6)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance4,
"m = 2" = importance5,
"m = 3" = importance6, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "min and max node are 5 and 9",
x = "Features",
y = "Mean Increased Node Purity")
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "with default node setting"
x = "Features",
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "with default node setting",
x = "Features",
y = "Mean Increased Node Purity")
importance1 <-  as.tibble(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.tibble(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.tibble(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "with default node setting",
x = "Features",
y = "Mean Increased Node Purity")
importance4 <-  as.data.frame(importance(biden_rf4)) %>%
add_rownames("features")
importance5 <-  as.data.frame(importance(biden_rf5)) %>%
add_rownames("features")
importance6 <-  as.data.frame(importance(biden_rf6)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance4,
"m = 2" = importance5,
"m = 3" = importance6, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "min and max node are 5 and 9",
x = "Features",
y = "Mean Increased Node Purity")
# bagging importance
bag_importance <- as.data.frame(importance(bag_tree)) %>%
add_rownames("features") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(bag_importance, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2))) +
labs(title = "Feature importance",
x = "Features",
y = "Mean Increased Node Purity")
importance1 <-  as.data.frame(importance(biden_rf1)) %>%
add_rownames("features")
importance2 <-  as.data.frame(importance(biden_rf2)) %>%
add_rownames("features")
importance3 <-  as.data.frame(importance(biden_rf3)) %>%
add_rownames("features")
importances <- bind_rows("m = 1" = importance1,
"m = 2" = importance2,
"m = 3" = importance3, .id = "m") %>%
mutate(IncNodePurity = round(IncNodePurity, 2))
ggplot(importances, aes(features, IncNodePurity)) +
geom_col(fill = 'sky blue', color = "black") +
geom_text(aes(label = IncNodePurity, y = (IncNodePurity / 2)),
size = 2) +
facet_wrap(~ m) +
labs(title = "Feature importance",
subtitle = "with default node setting",
x = "Features",
y = "Mean Increased Node Purity")
biden_rf4 <- randomForest(biden ~ ., data = biden_split$train,
mtry =1, ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf5 <- randomForest(biden ~ ., data = biden_split$train, mtry =2,
ntree = 500, nodesize = 5, maxnodes = 9)
biden_rf6 <- randomForest(biden ~ ., data = biden_split$train, mtry =3,
ntree = 500, nodesize = 5, maxnodes = 9)
mse_rf4 = mse(biden_rf4, biden_split$test)
mse_rf5 = mse(biden_rf5, biden_split$test)
mse_rf6 = mse(biden_rf6, biden_split$test)
kable(cbind(mse_rf4, mse_rf5, mse_rf6),
col.names = c("m = 1", "m = 2", "m = 3"))
